version: "3.0.0"
name: "syndicate-api-citadel"
description: "Bun-powered API registry with OpenAPI auto-generation"
author: "API Architect"
created: "2025-01-29"
updated: "2025-01-29"
license: "MIT"
env: development

# API Configuration
api:
  basePath: /api/v3
  version: "3.0.0"

  # Endpoint definitions
  endpoints:
    - path: /rules/validate
      method: POST
      summary: "Validate government compliance headers"
      description: "Validates request headers against GOV compliance rules"
      tags: [GOV, VALIDATE]
      operationId: validateHeaders
      parameters:
        - name: files
          in: query
          description: "Array of rule files to validate against"
          schema:
            type: array
            items:
              type: string
        - name: strict
          in: query
          description: "Enable strict validation mode"
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "Headers validation successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  headers:
                    type: integer
                  violations:
                    type: array
                    items:
                      type: string
                  timestamp:
                    type: string
                    format: date-time
        "400":
          description: "Validation failed"
      x-source: ["rules/gov/gov-header-001.md"]

    - path: /rules/grep
      method: GET
      summary: "Search governance rules by pattern"
      description: "Grep through rule documentation using regex patterns"
      tags: [GOV, GREP, SEARCH]
      operationId: grepRules
      parameters:
        - name: q
          in: query
          description: "Regex pattern to search for"
          schema:
            type: string
            example: "[GOV-.*REQUIRED]"
        - name: scope
          in: query
          description: "Filter by governance scope"
          schema:
            type: string
            enum: [GOV, SEC, DEV, OPS]
        - name: limit
          in: query
          description: "Maximum number of results"
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        "200":
          description: "Search results"
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                  scope:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                  total:
                    type: integer
                  cached:
                    type: boolean
      x-source: ["rules/gov/gov-header-001.md"]

    - path: /config
      method: GET
      summary: "Retrieve current API configuration"
      tags: [CONFIG, ADMIN]
      operationId: getConfiguration
      responses:
        "200":
          description: "Current configuration"
          content:
            application/yaml:
              schema:
                type: object
      x-source: ["rules/dev/dev-testing-001.md"]

    - path: /config/store
      method: POST
      summary: "Store configuration with hash"
      tags: [CONFIG, REGISTRY, ADMIN]
      operationId: storeConfiguration
      requestBody:
        content:
          application/yaml:
            schema:
              type: object
      responses:
        "201":
          description: "Configuration stored"
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string
                  size:
                    type: integer
      x-source: ["rules/dev/dev-testing-001.md"]

    - path: /secrets/{name}
      method: GET
      summary: "Retrieve encrypted secrets"
      tags: [SECURITY, VAULT, CRYPTO]
      operationId: getSecret
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Secret retrieved"
          content:
            application/json:
              schema:
                type: object
        "404":
          description: "Secret not found"
      x-source: ["rules/sec/sec-leak-001.md"]

    - path: /csrf/verify
      method: POST
      summary: "Verify CSRF protection tokens"
      tags: [SECURITY, CSRF]
      operationId: verifyCsrf
      parameters:
        - name: token
          in: header
          required: true
          description: "CSRF token to verify"
          schema:
            type: string
      responses:
        "200":
          description: "CSRF token valid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                  token:
                    type: string
                    enum: [valid, missing, invalid]
                  timestamp:
                    type: string
                    format: date-time
      x-source: ["rules/sec/sec-leak-001.md"]

    - path: /yaml/stream
      method: POST
      summary: "Stream and process YAML documents"
      tags: [REGISTRY, STREAM, PROCESSING]
      operationId: streamYaml
      requestBody:
        content:
          application/yaml:
            schema:
              type: object
      responses:
        "200":
          description: "YAML processed successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  processed:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
      x-source: ["rules/gov/gov-header-001.md"]

    - path: /ws/negotiate
      method: GET
      summary: "WebSocket connection negotiation"
      tags: [WEBSOCKET, REALTIME]
      operationId: negotiateWebsocket
      parameters:
        - name: protocol
          in: query
          description: "WebSocket subprotocol"
          schema:
            type: string
            enum: [json-rpc, graphql-ws, api-events]
      responses:
        "200":
          description: "WebSocket connection established"
      x-source: ["rules/gov/gov-header-001.md"]

    - path: "/webhooks/github"
      method: "POST"
      id: "github-webhook-sync"
      handler: "./src/workers/handlers/webhook-sync.ts"
      auth: "none"
      request:
        schema: "GitHubWebhook"
        content_type: "application/json"
        required: true
      response:
        "200":
          schema: "WebhookResponse"
          example: { status: "success", message: "Auto-sync triggered" }
        "401":
          schema: "Error"
        "500":
          schema: "Error"
      tags: ["webhooks", "github", "automation"]
      summary: "GitHub webhook for auto-sync registry"
      sourcemap: true
      x-source: ["rules/dev/dev-testing-001.md"]

    - path: "/api/energy/config"
      method: "GET"
      id: "energy-config"
      handler: "./src/api/handlers/energy-optimized.ts"
      auth: "none"
      response:
        "200":
          schema: "EnergyConfigResponse"
          example: { slideshow: { title: "Sample Slide Show" }, energyOptimizations: {} }
      tags: ["energy", "optimization", "bun-native"]
      summary: "Bun energy-optimized config endpoint (native fetch)"
      sourcemap: true
      x-source: ["rules/dev/dev-testing-001.md"]

    - path: "/api/energy/stream"
      method: "GET"
      id: "energy-stream"
      handler: "./src/api/handlers/energy-optimized.ts"
      auth: "none"
      response:
        "200":
          schema: "EnergyStreamResponse"
          content_type: "application/json"
      tags: ["energy", "streaming", "bun-readable"]
      summary: "Bun energy-optimized streaming endpoint (ReadableStream)"
      sourcemap: true
      x-source: ["rules/gov/gov-header-001.md"]

    - path: "/api/energy/concurrent"
      method: "GET"
      id: "energy-concurrent"
      handler: "./src/api/handlers/energy-optimized.ts"
      auth: "none"
      parameters:
        - name: "concurrency"
          in: "query"
          schema: { type: "integer", default: 5, minimum: 1, maximum: 50 }
      response:
        "200":
          schema: "EnergyConcurrentResponse"
          example: { concurrency: 5, results: [], totalTime: "150.00ms" }
      tags: ["energy", "concurrency", "bun-lightweight"]
      summary: "Bun energy-optimized concurrent processing (lightweight threads)"
      sourcemap: true
      x-source: ["rules/dev/dev-testing-001.md"]

    - path: "/api/energy/websocket"
      method: "GET"
      id: "energy-websocket"
      handler: "./src/api/handlers/energy-optimized.ts"
      auth: "none"
      response:
        "101":
          description: "WebSocket upgrade successful"
      tags: ["energy", "websocket", "bun-compression"]
      summary: "Bun energy-optimized WebSocket upgrade (permessage-deflate)"
      sourcemap: true
      x-source: ["rules/gov/gov-header-001.md"]

    - path: "/api/energy/metrics"
      method: "GET"
      id: "energy-metrics"
      handler: "./src/api/handlers/energy-optimized.ts"
      auth: "none"
      response:
        "200":
          schema: "EnergyMetricsResponse"
          example: { bunEnergyMetrics: {}, memoryBreakdown: {}, flourishingLevel: 100 }
      tags: ["energy", "metrics", "bun-dual-heap"]
      summary: "Bun energy harvesting metrics and flourishing status"
      sourcemap: true
      x-source: ["rules/dev/dev-testing-001.md"]

# OpenAPI specification configuration
openapi:
  generate: true
  version: "3.1.0"
  validate: true
  output: "./openapi.yaml"
  title: "Syndicate API Citadel"
  description: "Bun-powered API registry with OpenAPI auto-generation"
  servers:
    - url: "https://syndicate-api-citadel.utahj4754.workers.dev"
      description: "Cloudflare Workers Production"
    - url: "http://localhost:3004"
      description: "Local Development Server"