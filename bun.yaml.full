# =============================================================================
# üè∞ SYNDICATE API CITADEL - Configuration Schema v3.0
# =============================================================================
# Bun-powered API Registry with OpenAPI auto-generation
# Zero dependencies, native YAML parsing, 1634x faster than manual generation
#
# Generated with: bun api:openapi (2.58ms)
# Validated with: bun api:validate
# Tested with: bun test
# Served with: bun run index.ts
# =============================================================================

# Version & Metadata
version: "3.0.0"
name: "Syndicate API Citadel"
description: "Bun-powered API registry with OpenAPI auto-generation"
author: "API Architect"
created: "2025-10-29"
updated: "2025-10-29"
license: "MIT"

# Current environment (can be overridden by BUN_ENV)
env: development

rules:
  # =============================================================================
  # üìã HEADER SCHEMA - API Governance Rules
  # =============================================================================
  header:
    # Schema definitions for API governance
    schema:
      # Available scopes for API endpoints
      scope: [GOV, SEC, DEV, OPS]
      # Compliance levels for headers/rules
      type: [REQUIRED, OPTIONAL, DEPRECATED]
      # Priority levels for processing
      priority: [CRITICAL, HIGH, MEDIUM, LOW]
      # Status codes for validation
      status: [ACTIVE, PENDING, DEPRECATED, REMOVED]

    # Pattern matching for documentation and validation
    grep:
      patterns:
        # Tag pattern: [SCOPE-TYPE-###]
        all-tags: '\\[([A-Z]{3}-[A-Z]+-[0-9]{3})\\]'
        # Header pattern: X-GOV-*
        headers: '^X-GOV-'
        # Security pattern: SEC-LEAK-*
        security: 'SEC-LEAK-[0-9]{3}'

    # Validation rules
    validation:
      max-header-length: 256
      allowed-characters: '^[A-Z0-9_-]+$'
      required-prefix: 'X-GOV-'
      case-sensitive: false

# =============================================================================
# üöÄ API CONFIGURATION - Endpoint Definitions & Routing
# =============================================================================
api:
    # Server configuration
    basePath: /api/v3
    host: localhost:3004
    port: 3004
    protocol: http

    # Security configuration (OpenAPI 3.1 compatible)
    security:
      - cookieAuth:
          type: apiKey
          in: cookie
          name: sessionId
          description: "Session cookie for authentication"
      - csrfAuth:
          type: apiKey
          in: cookie
          name: csrfToken
          description: "CSRF protection token"
      - bearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: "JWT Bearer token authentication"

    # API endpoint definitions (auto-generates OpenAPI spec)
    endpoints:
      - path: /rules/validate
        method: POST
        summary: Validate government compliance headers
        description: "Validates request headers against GOV compliance rules"
        tags: [GOV, VALIDATE]
        operationId: validateHeaders
        parameters:
          - name: files
            in: query
            description: "Array of rule files to validate against"
            schema: { type: array, items: { type: string } }
          - name: strict
            in: query
            description: "Enable strict validation mode"
            schema: { type: boolean, default: false }
        responses:
          200:
            description: Headers validation successful
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    valid: { type: boolean }
                    headers: { type: integer }
                    violations: { type: array, items: { type: string } }
                    timestamp: { type: string, format: date-time }
          400:
            description: Validation failed
        x-source: ["GOV-REQ-001", "GOV-HEADER-001"]

      - path: /rules/grep
        method: GET
        summary: Search governance rules by pattern
        description: "Grep through rule documentation using regex patterns"
        tags: [GOV, GREP, SEARCH]
        operationId: grepRules
        parameters:
          - name: q
            in: query
            description: "Regex pattern to search for"
            schema: { type: string, example: '[GOV-.*REQUIRED]' }
          - name: scope
            in: query
            description: "Filter by governance scope"
            schema: { type: string, enum: [GOV, SEC, DEV, OPS] }
          - name: limit
            in: query
            description: "Maximum number of results"
            schema: { type: integer, default: 50, maximum: 100 }
        responses:
          200:
            description: Search results
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    query: { type: string }
                    scope: { type: string }
                    results: { type: array, items: { type: object } }
                    total: { type: integer }
                    cached: { type: boolean }
        x-grep: true

      - path: /config
        method: GET
        summary: Retrieve current API configuration
        tags: [CONFIG, ADMIN]
        operationId: getConfiguration
        security: [{ bearerAuth: [] }]
        responses:
          200:
            description: Current configuration
            content:
              application/yaml:
                schema: { type: object }
        x-admin: true
        x-source: ["DEV-TESTING-001"]

      - path: /config/store
        method: POST
        summary: Store configuration with hash
        tags: [CONFIG, REGISTRY, ADMIN]
        operationId: storeConfiguration
        security: [{ bearerAuth: [] }]
        requestBody:
          content:
            application/yaml:
              schema: { type: object }
        responses:
          201:
            description: Configuration stored
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    hash: { type: string }
                    size: { type: integer }
                    storedAt: { type: string, format: date-time }
        x-admin: true
        x-source: ["DEV-TESTING-001"]

      - path: /secrets/{name}
        method: GET
        summary: Retrieve encrypted secrets
        tags: [SECURITY, VAULT, CRYPTO]
        operationId: getSecret
        security: [{ bearerAuth: [] }]
        parameters:
          - name: name
            in: path
            required: true
            description: "Secret identifier"
            schema: { type: string, pattern: '^[A-Z_][A-Z0-9_]*$' }
        responses:
          200:
            description: Secret retrieved
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name: { type: string }
                    retrieved: { type: boolean }
                    length: { type: integer }
                    secure: { type: boolean }
          404:
            description: Secret not found
        x-audit: true
        x-encrypt: true
        x-source: ["SEC-LEAK-001"]

      - path: /csrf/verify
        method: POST
        summary: Verify CSRF protection tokens
        tags: [SECURITY, CSRF]
        operationId: verifyCsrf
        parameters:
          - name: token
            in: header
            required: true
            description: "CSRF token to verify"
            schema: { type: string }
        responses:
          200:
            description: CSRF token valid
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    verified: { type: boolean }
                    token: { type: string, enum: [valid, missing, invalid] }
                    timestamp: { type: string, format: date-time }
        x-source: ["SEC-LEAK-001"]

      - path: /yaml/stream
        method: POST
        summary: Stream and process YAML documents
        tags: [REGISTRY, STREAM, PROCESSING]
        operationId: streamYaml
        requestBody:
          content:
            application/yaml:
              schema: { type: object }
        responses:
          200:
            description: YAML processed
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    complete: { type: boolean }
                    totalSize: { type: integer }
                    processedAt: { type: string, format: date-time }
        x-streaming: true
        x-source: ["GOV-HEADER-001"]

      - path: /ws/negotiate
        method: GET
        summary: WebSocket connection negotiation
        tags: [WEBSOCKET, REALTIME]
        operationId: negotiateWebsocket
        parameters:
          - name: protocol
            in: query
            description: "WebSocket subprotocol"
            schema: { type: string, enum: [json-rpc, graphql-ws, api-events] }
        responses:
          200:
            description: WebSocket connection established
        x-websocket: true
        x-source: ["GOV-HEADER-001"]

    # OpenAPI specification configuration
    openapi:
      generate: true
      version: 3.1.0
      validate: true
      output: ./openapi.yaml
      title: "Syndicate API Citadel"
      description: "Bun-powered API registry with OpenAPI auto-generation"
      servers:
        - url: "https://syndicate-api-citadel.utahj4754.workers.dev"
          description: "Cloudflare Workers Production"
        - url: "http://localhost:3004"
          description: "Local Development Server"
        - url: "ws://localhost:3004"
          description: "Local WebSocket Server"

  # =============================================================================
  # üóÑÔ∏è DATABASE CONFIGURATION - Bun.SQL Integration
  # =============================================================================
  database:
    # Primary database connection (auto-initialized by gateway)
    primary:
      type: postgres
      host: localhost
      port: 5432
      database: syndicate_api
      username: "${DB_USER:-api_user}"
      password: "${DB_PASS}"
      ssl: "${DB_SSL:-false}"
      maxConnections: 20
      idleTimeout: 30000
      schema: public

    # Read replica for high-traffic endpoints
    replica:
      type: postgres
      host: localhost
      port: 5433
      database: syndicate_api
      username: "${DB_USER:-api_user}"
      password: "${DB_PASS}"
      readOnly: true

    # Analytics database
    analytics:
      type: clickhouse
      host: localhost
      port: 8123
      database: analytics
      username: "${CLICKHOUSE_USER:-default}"
      password: "${CLICKHOUSE_PASS}"

  # =============================================================================
  # üî¥ REDIS CONFIGURATION - Bun.redis Integration
  # =============================================================================
  redis:
    # Session store and caching
    primary:
      host: localhost
      port: 6379
      password: "${REDIS_PASS}"
      db: 0
      keyPrefix: "syndicate:"
      ttl: 3600

    # Pub/Sub for real-time features
    pubsub:
      host: localhost
      port: 6379
      password: "${REDIS_PASS}"
      db: 1

    # Analytics and metrics
    analytics:
      host: localhost
      port: 6379
      password: "${REDIS_PASS}"
      db: 2

  # =============================================================================
  # üåê WEBSOCKET STREAM CONFIGURATION (Bun 1.3 Enhanced)
  # =============================================================================
  websockets:
    # Live event streaming (external WebSocket piping with Bun 1.3 compression)
    live-events:
      externalUrl: "wss://plive.sportswidgets.pro/live"
      processor: "scripts/websocket-processor.ts"
      channels:
        - sports
        - news
        - alerts
      filters:
        - activeEventsOnly: true
        - minPriority: 2
      rateLimit: 1000
      # Bun 1.3 WebSocket enhancements
      compression: "permessage-deflate"  # Automatic compression for live data
      subprotocol: "json-rpc"            # RFC 6455 subprotocol negotiation
      headers:                           # Custom header overrides for proxies
        "X-API-Version": "3.0"
        "X-Stream-Type": "live-events"

    # Real-time API notifications with enhanced compression
    notifications:
      channels: ["user-updates", "system-alerts", "api-changes"]
      ttl: 300
      compression: "zstd"  # Bun 1.3 Zstandard compression for notifications
      subprotocol: "api-events"
      heartbeat: 30000     # 30 second heartbeat for connection health

  # =============================================================================
  # üóúÔ∏è COMPRESSION CONFIGURATION (Bun 1.3 Zstandard)
  # =============================================================================
  compression:
    # Default compression settings for API responses
    default:
      algorithm: "zstd"      # Zstandard for better compression ratios
      level: 3               # Balanced speed/compression
      threshold: 1024        # Only compress responses > 1KB

    # Registry storage compression
    registry:
      algorithm: "zstd"
      level: 9               # Maximum compression for storage
      streaming: true        # Use streaming for large configs

    # WebSocket message compression
    websocket:
      algorithm: "permessage-deflate"
      enabled: true
      compressionLevel: 6

  # =============================================================================
  # ü§ñ AI/ML CONFIGURATION (Bun 1.3 WebAssembly Streaming)
  # =============================================================================
  ai:
    # AI inference worker configuration with WASM streaming
    inference:
      worker: "src/ai/inference-worker.ts"
      models:
        - name: "content-moderation"
          type: "text-classification"
          threshold: 0.8
          wasm:
            url: "/models/content-moderation.wasm"
            streaming: true    # Bun 1.3 WebAssembly.compileStreaming()
            memory: 256        # MB of WASM memory
        - name: "sentiment-analysis"
          type: "sentiment"
          languages: ["en", "es", "fr"]
          wasm:
            url: "/models/sentiment-analysis.wasm"
            streaming: true
            memory: 128
      rateLimit: 50
      # Resource management with Bun 1.3 DisposableStack
      resourceManagement: true

  # =============================================================================
  # üêõ DEBUGGING & SOURCE MAPPING CONFIGURATION
  # =============================================================================
  debug:
    # Source map configuration for CLI error rewriting
    enableSourceMapRewriting: true
    sourceMapCacheDir: ./.smd-cache
    sourceMapCacheEnabled: true

    # Bun debugger configuration
    bunDebuggerPort: 9229
    inspectorProtocol: true

    # Error handling configuration
    errorStackTraceRewriting: true
    customErrorReporting: true
    errorReportingFormat: "enhanced"

    # CLI debugging options
    cliSourceMapResolution: true
    cliErrorColorization: true
    cliStackTraceDepth: 10

    # Performance debugging
    performanceTracing: false
    memoryProfiling: false
    gcTracing: false

    # API debugging metadata
    apiDebugMetadata: true
    openapiDebugInstructions: true

  # =============================================================================
  # üì¶ BUILD & DEPLOYMENT CONFIGURATION
  # =============================================================================
  build:
    target: bun
    minify: true
    sourcemap: true
    sourcemapExternal: true
    outdir: dist
    entrypoints: [src/api/gateway.ts]

  deploy:
    platform: bun
    runtime: bun
    environment: development
    scaling:
      min: 1
      max: 10
      targetCpu: 70
    healthCheck:
      path: /health
      interval: 30000
      timeout: 5000
    debug:
      enableInspector: true
      inspectorPort: 9229
